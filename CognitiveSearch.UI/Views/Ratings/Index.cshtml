@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model CognitiveSearch.UI.Models.RatingsViewModel

@{
    ViewData["Title"] = "Ratings";
}

<script>
    feedbacks = @Html.Raw(Json.Serialize(Model.feedbacks));
    currentPage = 0;

    function updateTable(query = null) {
        var table = $("#ratings-table-body")
        table.empty();
        rowsHtml = '';
        rowCount = 0;
        for (i in feedbacks) {
            feedback = feedbacks[i]
            if (query != null) {
                if (!feedback.query.includes(query)) {
                    continue
                }
            }
            rowCount += 1
            var ratingContent = ''
            if (feedback.feedbackRating > 1) {
                ratingContent = `<td class="ratings-table-column-align ratings-table-thumbs-up"></td>`
            }
            else {
                //ratingContent = `<td class="ratings-table-column-align ratings-table-thumbs-down" onclick="tdclick();"></td>`
                ratingContent = `<td class="ratings-table-column-align ratings-table-thumbs-down" onclick="remove('${feedback.userID}', '${feedback.documentName}', '${feedback.query}');"></td>`
            }
            rowsHtml += `<tr class="ratings-table-rows">
                                <th scope="row">${rowCount}</th>
                                <td>${feedback.documentName}</td>
                                <td class="ratings-table-column-align">${feedbacks[i].query}</td>
                                ${ratingContent}
                            </tr>`
        }
        table.html(rowsHtml);
    }

    function remove(userID, documentName, query) {
        $.post("/Ratings/deleteFeedback",
            {
                feedbackVal: {
                    userID: userID,
                    userType: null,
                    givenName: null,
                    documentName: documentName,
                    feedbackRating: 1,
                    comment: "placeholder",
                    query: query
                }
            },
            function (data, status) {
                if (status == "success") {
                    feedbacks = data
                    updateTable()
                }
            }
        );
    };

    function handleFilter() {
        var input = $("#rating-filter-input").val();
        updateTable(input)
    }

    $(function () {
        updateTable()
    });
</script>

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
<div>
    <div class="content ratings-content">
        <table class="table">
            <thead class="ratings-table-header">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Document</th>
                    <th class="ratings-table-column-align" scope="col">Query</th>
                    <th class="ratings-table-column-align" scope="col">Rating</th>
                </tr>
            </thead>
            <tbody id="ratings-table-body">
            </tbody>
        </table>
    </div>
</div>

@*
    page = page - 1;
    if (page < 0)
    {
        page = 0;
    }
    var userId = Request.Cookies["userId"];

    IQueryable<FeedbackModel> feedbacks;
    if (filterQuery == null)
    {
        feedbacks = this._context.Feedbacks.Where(feedback => feedback.userID.Equals(userId) && feedback.feedbackRating <= 1);
    }
    else
    {
        feedbacks = this._context.Feedbacks.Where(feedback => feedback.userID.Equals(userId) && feedback.feedbackRating <= 1 && feedback.query.Contains(filterQuery));
    }
    int numLength = feedbacks.Count();
    int take = 100;
    int skip = take * page;
    if (skip > numLength)
    {
        skip = (numLength / take) * take;
    }

    var viewModel = new RatingsViewModel
    {
        feedbacks = feedbacks.Skip(skip).Take(take).ToList(),
        pages = (int)Math.Ceiling((float)numLength / take),
    };



    @for (int i = 0; i < Model.feedbacks.Count; i++)
                {
                    <tr class="ratings-table-rows">
                        <th scope="row">@(i+1)</th>
                        <td>@Model.feedbacks[i].documentName</td>
                        <td class="ratings-table-column-align">@Model.feedbacks[i].query</td>
                        @*currently always == 1 but condition will be used when 1-5 star rating is applied
    @if (Model.feedbacks[i].feedbackRating > 1)
    {
        <td class="ratings-table-column-align ratings-table-thumbs-up"></td>
    }
    else
    {
        <td class="ratings-table-column-align ratings-table-thumbs-down"></td>
    }
                        </tr>
                    }

*@